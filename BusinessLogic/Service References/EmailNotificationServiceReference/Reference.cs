//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessLogic.EmailNotificationServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EmailNotificationServiceReference.IEmailNotificationService")]
    public interface IEmailNotificationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailNotificationService/InsertIntoOutgoingEmailLog", ReplyAction="http://tempuri.org/IEmailNotificationService/InsertIntoOutgoingEmailLogResponse")]
        string InsertIntoOutgoingEmailLog(string emailNotificationsCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailNotificationService/InsertIntoOutgoingEmailLog", ReplyAction="http://tempuri.org/IEmailNotificationService/InsertIntoOutgoingEmailLogResponse")]
        System.Threading.Tasks.Task<string> InsertIntoOutgoingEmailLogAsync(string emailNotificationsCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailNotificationService/GetHtmlForTemplate", ReplyAction="http://tempuri.org/IEmailNotificationService/GetHtmlForTemplateResponse")]
        string GetHtmlForTemplate(string emailNotificationsCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailNotificationService/GetHtmlForTemplate", ReplyAction="http://tempuri.org/IEmailNotificationService/GetHtmlForTemplateResponse")]
        System.Threading.Tasks.Task<string> GetHtmlForTemplateAsync(string emailNotificationsCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailNotificationService/GetUserNameFromEmailAddress", ReplyAction="http://tempuri.org/IEmailNotificationService/GetUserNameFromEmailAddressResponse")]
        string GetUserNameFromEmailAddress(string emailNotificationsCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailNotificationService/GetUserNameFromEmailAddress", ReplyAction="http://tempuri.org/IEmailNotificationService/GetUserNameFromEmailAddressResponse")]
        System.Threading.Tasks.Task<string> GetUserNameFromEmailAddressAsync(string emailNotificationsCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailNotificationService/GetNotificationDetails", ReplyAction="http://tempuri.org/IEmailNotificationService/GetNotificationDetailsResponse")]
        string GetNotificationDetails(string emailNotificationsCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailNotificationService/GetNotificationDetails", ReplyAction="http://tempuri.org/IEmailNotificationService/GetNotificationDetailsResponse")]
        System.Threading.Tasks.Task<string> GetNotificationDetailsAsync(string emailNotificationsCriteria);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailNotificationServiceChannel : BusinessLogic.EmailNotificationServiceReference.IEmailNotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailNotificationServiceClient : System.ServiceModel.ClientBase<BusinessLogic.EmailNotificationServiceReference.IEmailNotificationService>, BusinessLogic.EmailNotificationServiceReference.IEmailNotificationService {
        
        public EmailNotificationServiceClient() {
        }
        
        public EmailNotificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailNotificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailNotificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailNotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string InsertIntoOutgoingEmailLog(string emailNotificationsCriteria) {
            return base.Channel.InsertIntoOutgoingEmailLog(emailNotificationsCriteria);
        }
        
        public System.Threading.Tasks.Task<string> InsertIntoOutgoingEmailLogAsync(string emailNotificationsCriteria) {
            return base.Channel.InsertIntoOutgoingEmailLogAsync(emailNotificationsCriteria);
        }
        
        public string GetHtmlForTemplate(string emailNotificationsCriteria) {
            return base.Channel.GetHtmlForTemplate(emailNotificationsCriteria);
        }
        
        public System.Threading.Tasks.Task<string> GetHtmlForTemplateAsync(string emailNotificationsCriteria) {
            return base.Channel.GetHtmlForTemplateAsync(emailNotificationsCriteria);
        }
        
        public string GetUserNameFromEmailAddress(string emailNotificationsCriteria) {
            return base.Channel.GetUserNameFromEmailAddress(emailNotificationsCriteria);
        }
        
        public System.Threading.Tasks.Task<string> GetUserNameFromEmailAddressAsync(string emailNotificationsCriteria) {
            return base.Channel.GetUserNameFromEmailAddressAsync(emailNotificationsCriteria);
        }
        
        public string GetNotificationDetails(string emailNotificationsCriteria) {
            return base.Channel.GetNotificationDetails(emailNotificationsCriteria);
        }
        
        public System.Threading.Tasks.Task<string> GetNotificationDetailsAsync(string emailNotificationsCriteria) {
            return base.Channel.GetNotificationDetailsAsync(emailNotificationsCriteria);
        }
    }
}
